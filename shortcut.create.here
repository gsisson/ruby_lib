#!/usr/bin/env ruby

require '~/usr/ruby/lib/dir2.rb'
require '~/usr/ruby/lib/string_colorize.rb'
#require '~/usr/ruby/lib/file_symlink'
require '~/usr/ruby/lib/filesystem'
require 'clipboard' #gem install clipboard
#require 'open3'

DIR ='t:/RECYCLABLE/v/'

#video_extentions_ok = /lnk$|mp3$|jpg$|jpeg$|txt$|xmp$|png$|sh$|proj$|gif$|url$|tif$|rb$|THM$|AAE$|psd$/i
 video_extentions_ok = /f4v$|webm$|m2v$|m2t$|flv$|mts$|m4v$|avi$|3gp$|wmv$|mov$|mp4$|mpg$|mpeg$|mkv$/i
 ignore_extentions = /prproj$|png$|jpg$|iso$|aae$/i

def usage(args = nil)
  name = File.basename(__FILE__)
  STDERR.puts("\n#{args}\n\n") if args != nil
  STDERR.puts "usage: #{name} -|FILES"
  exit 1
end

if ! Dir.exist?(DIR)
  STDERR.puts "Directory DNE! #{DIR}"
  exit 1
end

def handle(tgt, links)
  STDERR.puts "# found #{links.size} link#{links.size > 0 ? '' : 's'} to that vid"
  return if links.size == 0
  puts "#{tgt}".yellow
  
  links.each do |lnk|
    where_to_point=tgt
    lnk_file_to_fix="#{DIR}#{lnk}"
    puts lnk_file_to_fix
    begin
      Dir.chdir File.dirname(lnk_file_to_fix) do
        # STDERR.puts "Dir.chdir '#{File.dirname(lnk_file_to_fix)}'"
        # STDERR.puts "  FS.mkshortcut_in_cwd(#{where_to_point})"
        FS.mkshortcut_in_cwd(where_to_point)
      end
    rescue => e
      STDERR.puts "%%%%%%%%% ERROR! %%%%%%%%%%%".red
      STDERR.puts e
      STDERR.puts "%%%%%% (continuing) %%%%%%%%".red
    end
  end
end

usage if ARGV.count == 0

if ARGV.count == 1 && ARGV[0] == '-'
  targets=Clipboard.paste.split
  usage "ERROR: nothing on clipboard!" if targets.count == 0
else
  targets=ARGV
end

errs=[]
valids = []
targets.each do |target|
  if target =~ video_extentions_ok
    valids << target
  else
    if target !~ ignore_extentions
      errs << target
    end
  end
end
if errs.size > 0
  STDERR.puts "\nERROR: args must be video types!".red
  errs.each do |err|
    STDERR.puts "       (#{err})".red
  end
  STDERR.puts
  exit 1
end
targets = valids

STDERR.puts "# working on #{targets.size} items"

Dir.chdir DIR

STDERR.print "# looking up all files..."
vids = Dir2.all_files_recursively()
vids.select! {|i| ! Dir.exist?(i)}
STDERR.puts " found #{vids.count} files"

STDERR.print "# extracting just .lnk files..."
links = vids.select { |vid| vid =~ /lnk$/ }
STDERR.puts " found #{links.count} lnks"

STDERR.print '# extracting just vids...'
vids.select! {|i| i =~ video_extentions_ok } # reject files of types not interested in
STDERR.puts " found #{vids.count} vids"

vids.map! {|i|"#{DIR}#{i}"}
STDERR.print '# checking for duplicate vids...'
hash = FS.verify_no_dup_files_across_dirs(vids)
STDERR.puts " ok"
STDERR.puts

ok_targets=[]
targets.each do |target|
  if ! hash[File.basename(target)]
    STDERR.puts "\nERROR: Target file was not found anywhere!".red
    STDERR.puts "       (#{target})\n".red
    #exit 1
  else
    ok_targets << target
  end
end
targets = ok_targets

targets.each_with_index do |target, i|
  bn=File.basename(target)
  tgt = hash[bn]
  STDERR.puts "== #{i+1} of #{targets.count} ==> #{bn}.lnk".cyan_bold
  links2=links.select { |link| link =~ /#{bn}.lnk/  }
  handle(tgt,links2)
end
