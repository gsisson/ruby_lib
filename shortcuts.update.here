#!/usr/bin/env ruby

require '~/usr/ruby/lib/dir2.rb'
require '~/usr/ruby/lib/file_symlink'
require '~/usr/ruby/lib/filesystem'
require 'clipboard' #gem install clipboard
require 'open3'

DIR ='t:/RECYCLABLE/v/'

def usage(args = nil)
  name = File.basename(__FILE__)
  STDERR.puts("\n#{args}\n\n") if args != nil
  STDERR.puts "usage: #{name} [-r]"
  exit 1
end

if ! Dir.exist?(DIR)
  STDERR.puts "Directory DNE! #{DIR}"
  exit 1
end

recursive=false
usage if ARGV.count > 1
if ARGV.count > 0
  usage if ARGV[0] != '-r'
  recursive=true
end

dirs = [Dir2.pwd]
dirs = ["./"]
if recursive
  dirs += Dir2.all_dirs_recursively()
end

vids=FS.all_vids_recursively(DIR)

# ensure all lnk files are valid
links={}
errs=[]
for dir in dirs
  Dir.chdir dir do  
    local_lnks = Dir2.glob_i('*.lnk') # ('**/*.lnk')
    local_lnks.each do |lnk|
      lnk_f="/#{File.basename(lnk).sub(/.lnk$/,'')}"
      next if lnk_f !~ FS::VIDEO_EXTENSIONS
      vids_match = vids.select { |vid| vid[lnk_f] }
      if vids_match.size != 1
        msg = "  #{dir}#{lnk}: (vids_match.size:#{vids_match.size})\n"
        vids_match.each {|vid| msg += "    #{vid}\n" }
        errs << msg
      else
        links["#{dir}#{lnk}"] = vids_match[0]
      end
    end
  end
end
if errs.size > 0
  STDERR.puts "found invalid lnk files:"
  errs.each { |err| STDERR.puts err }
  STDERR.puts "exiting..."
  exit 1
end

for dir in dirs
  Dir.chdir dir do
    puts "==========================================================="
    puts "WORKING in '#{dir}'"
    local_lnks = Dir2.glob_i('*.lnk') # ('**/*.lnk')
    local_lnks.each do |lnk|
      lnk_f=File.basename(lnk).sub(/.lnk$/,'')
      next if lnk_f !~ FS::VIDEO_EXTENSIONS
      tgt=links["#{dir}#{lnk}"]
      puts "  relink #{lnk}"
      puts "      to #{tgt}"
      puts "  + mkshortcut_in_cwd(#{tgt})"
      if tgt == 't:/RECYCLABLE/v/blah/blah'
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        STDERR.puts "    ===========> skipping blah blah <============"
        return
      else
        FS.mkshortcut_in_cwd(tgt)
        puts "    (done)"
      end
    end
    puts
  end
end
